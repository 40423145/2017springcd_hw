<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>40423145上課作業</title><link href="./" rel="alternate"></link><link href="./feeds/course.atom.xml" rel="self"></link><id>./</id><updated>2017-06-15T00:00:00+08:00</updated><entry><title>2017/06/15第十七週</title><link href="./20170615di-shi-qi-zhou.html" rel="alternate"></link><updated>2017-06-15T00:00:00+08:00</updated><author><name>40423145</name></author><id>tag:,2017-06-15:./20170615di-shi-qi-zhou.html</id><summary type="html">&lt;p&gt;&lt;b&gt;&lt;font color="blue"&gt;行走機構 2D 靜態繪圖&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;


&lt;h3&gt;W17零件&amp;amp;組合&lt;/h3&gt;
&lt;p&gt;&lt;iframe src="./../data/hw17/w17零件1.html" width="800" height="600"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;iframe src="./../data/hw17/w17零件2.html" width="800" height="600"&gt;&lt;/iframe&gt;

&lt;iframe src="./../data/hw17/w17零件3.html" width="800" height="600"&gt;&lt;/iframe&gt;

&lt;iframe src="./../data/hw17/W17組合圖.html" width="800" height="600"&gt;&lt;/iframe&gt;

&lt;h3&gt;繪製影片&lt;/h3&gt;
&lt;iframe src="https://player.vimeo.com/video/223104247" width="640" height="361" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/223104247"&gt;w17 零件-1&lt;/a&gt; from &lt;a href="https://vimeo.com/user44207163"&gt;h2itw&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;iframe src="https://player.vimeo.com/video/223104298" width="640" height="361" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/223104298"&gt;w17 零件-2&lt;/a&gt; from &lt;a href="https://vimeo.com/user44207163"&gt;h2itw&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;iframe src="https://player.vimeo.com/video/223463413" width="640" height="361" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/223463413"&gt;w17 零件-3.mp4&lt;/a&gt; from &lt;a href="https://vimeo.com/user44207163"&gt;h2itw&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;iframe src="https://player.vimeo.com/video/223463370" width="640" height="361" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/223463370"&gt;w17 組合&lt;/a&gt; from &lt;a href="https://vimeo.com/user44207163"&gt;h2itw&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script src="../data/Brython-3.3.1/brython.js"&gt;&lt;/script&gt;

&lt;script src="../data/Brython-3.3.1/brython_stdlib.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;Y:\tmp\2017springcd_hw\users\yen.leo,&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;!-- Created by Leo: http://leoeditor.com/leo_toc.html --&gt;
&lt;leo_file xmlns:leo="http://leoeditor.com/namespaces/leo-python-editor/1.1" &gt;
&lt;leo_header file_format="2"/&gt;
&lt;vnodes&gt;
&lt;v t="leo.20170621234054.1"&gt;&lt;vh&gt;@edit 20170615.md&lt;/vh&gt;&lt;/v&gt;
&lt;/vnodes&gt;
&lt;tnodes&gt;
&lt;t tx="leo.20170621234054.1"&gt;@language md
Title: 2017/06/15第十七週
Date: 2017-06-15
Category: Course
Tags: w17
Author: 40423145

&amp;lt;b&amp;gt;&amp;lt;font color="blue"&amp;gt;行走機構 2D 靜態繪圖&amp;lt;/font&amp;gt;&amp;lt;/b&amp;gt;

&amp;lt;!-- PELICAN_END_SUMMARY --&amp;gt;

&amp;lt;iframe src="https://player.vimeo.com/video/223104247" width="640" height="361" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href="https://vimeo.com/223104247"&amp;gt;w17 零件-1&amp;lt;/a&amp;gt; from &amp;lt;a href="https://vimeo.com/user44207163"&amp;gt;h2itw&amp;lt;/a&amp;gt; on &amp;lt;a href="https://vimeo.com"&amp;gt;Vimeo&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;

&amp;lt;iframe src="https://player.vimeo.com/video/223104298" width="640" height="361" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href="https://vimeo.com/223104298"&amp;gt;w17 零件-2&amp;lt;/a&amp;gt; from &amp;lt;a href="https://vimeo.com/user44207163"&amp;gt;h2itw&amp;lt;/a&amp;gt; on &amp;lt;a href="https://vimeo.com"&amp;gt;Vimeo&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;

&amp;lt;iframe src="https://player.vimeo.com/video/223463413" width="640" height="361" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href="https://vimeo.com/223463413"&amp;gt;w17 零件-3.mp4&amp;lt;/a&amp;gt; from &amp;lt;a href="https://vimeo.com/user44207163"&amp;gt;h2itw&amp;lt;/a&amp;gt; on &amp;lt;a href="https://vimeo.com"&amp;gt;Vimeo&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;

&amp;lt;iframe src="https://player.vimeo.com/video/223463370" width="640" height="361" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href="https://vimeo.com/223463370"&amp;gt;w17 組合&amp;lt;/a&amp;gt; from &amp;lt;a href="https://vimeo.com/user44207163"&amp;gt;h2itw&amp;lt;/a&amp;gt; on &amp;lt;a href="https://vimeo.com"&amp;gt;Vimeo&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;




&amp;lt;!-- 導入 Brython 標準程式庫 --&amp;gt;

&amp;lt;script src="../data/Brython-3.3.1/brython.js"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src="../data/Brython-3.3.1/brython_stdlib.js"&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;!-- 啟動 Brython --&amp;gt;
&amp;lt;script&amp;gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&amp;lt;/script&amp;gt;

&amp;lt;!-- 以下實際利用  Brython 畫四連桿 trace point 路徑--&amp;gt;
&amp;lt;!--&amp;lt;canvas id="w17" width="800" height="600"&amp;gt;&amp;lt;/canvas&amp;gt;--&amp;gt;

&amp;lt;div id="container" width="800" height="600"&amp;gt;&amp;lt;/div&amp;gt;

&amp;lt;script type="text/python3"&amp;gt;
from browser import document as doc
from browser import html
import math
container = doc['container']
degree = math.pi/180
def button1(event):
    a = input("give me a")
    container &amp;lt;= str(math.cos(60*degree)+float(a))
doc["button1"].bind("click", button1)
&amp;lt;/script&amp;gt;

###行走機構

&amp;lt;iframe src="https://player.vimeo.com/video/222493042" width="640" height="357" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;

&lt;/t&gt;
&lt;/tnodes&gt;
&lt;/leo_file&gt;

window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 畫四連桿 trace point 路徑--&gt;

&lt;!--&lt;canvas id="w17" width="800" height="600"&gt;&lt;/canvas&gt;--&gt;

&lt;div id="container" width="800" height="600"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
from browser import html
import math
container = doc['container']
degree = math.pi/180
def button1(event):
    a = input("give me a")
    container &lt;= str(math.cos(60*degree)+float(a))
doc["button1"].bind("click", button1)
&lt;/script&gt;

&lt;h3&gt;行走機構&lt;/h3&gt;
&lt;iframe src="https://player.vimeo.com/video/222493042" width="640" height="357" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;</summary><category term="w17"></category></entry><entry><title>2017springcd 第十六週</title><link href="./2017springcd-di-shi-liu-zhou.html" rel="alternate"></link><updated>2017-06-08T00:00:00+08:00</updated><author><name>40423145</name></author><id>tag:,2017-06-08:./2017springcd-di-shi-liu-zhou.html</id><summary type="html">&lt;p&gt;&lt;b&gt;&lt;font color="blue"&gt;無&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;
</summary><category term="w16"></category></entry><entry><title>2017springcd 第十五週</title><link href="./2017springcd-di-shi-wu-zhou.html" rel="alternate"></link><updated>2017-06-01T00:00:00+08:00</updated><author><name>40423145</name></author><id>tag:,2017-06-01:./2017springcd-di-shi-wu-zhou.html</id><summary type="html">&lt;p&gt;&lt;b&gt;&lt;font color="blue"&gt;第六組齒輪組合&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;


&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;請以 W15 練習為網誌標題, 800x600 為畫布大小, 在畫布正中央畫一個半徑為 250 畫素, 壓力角 20, 齒數為 36 齒, 且只有上半齒形的漸開線正齒輪輪廓.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;完成後, 請在正齒輪中央寫上自己的學號, 並建立第二個 800x600 的畫布, 請畫出只有一齒輪廓, 且充滿畫布 80% 範圍的正齒輪, 且該齒輪廓下方水平線, 連接兩端齒根圓點交的直線以紅色繪製, 且在齒輪下方以藍色字元寫上自己的學號.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;請各學員在各自 github 倉儲中的 data/py 目錄中, 編寫一個可以採圓心座標, 節圓半徑, 齒數, 壓力角與定位角度作為輸入的齒輪程式函式, 交由組長從各組員的 submodule 設定中呼叫導入, 以便在各分組的網頁中完成一個畫出所有組員協同繪圖的齒輪減速組圖, 且各齒輪正中心必須寫上組員學號, 各組按照學號大小排序, 分別由最右邊齒數 16 齒開始囓合, 依序增加 2 齒, 當排至平面四齒囓合後, 第五位組員則以垂直方向向下囓合兩個齒輪後, 轉由右至左水平排列, 直至所有組員均各提供一個協同囓合用的齒輪為止.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;請依照上述規劃, 在 Onshape 完成相同齒輪組的囓合協同繪圖.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;各組員與組員請同時用 Youtube 與 vimeo, 紀錄上述各階段程式編寫與繪圖配置的 mp4 影片檔案, 標題為"協同產品設計實習第十五週練習".&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;1.請以 W15 練習為網誌標題, 800x600 為畫布大小, 在畫布正中央畫一個半徑為 250 畫素, 壓力角 20, 齒數為 36 齒, 且只有上半齒形的漸開線正齒輪輪廓.&lt;/h3&gt;
&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script src="../data/Brython-3.3.1/brython.js"&gt;&lt;/script&gt;

&lt;script src="../data/Brython-3.3.1/brython_stdlib.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 繪圖--&gt;

&lt;canvas id="onegear" width="800" height="600"&gt;&lt;/canvas&gt;

&lt;div id="onegear_div" width="800" height="20"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# deg 為角度轉為徑度的轉換因子
deg = math.pi/180.
# 定義 Spur 類別
class Spur(object):
    def __init__(self, ctx):
        self.ctx = ctx

    def create_line(self, x1, y1, x2, y2, width=3, fill="red"):
        self.ctx.beginPath()
        self.ctx.lineWidth = width
        self.ctx.moveTo(x1, y1)
        self.ctx.lineTo(x2, y2)
        self.ctx.strokeStyle = fill
        self.ctx.stroke()
    #
    # 定義一個繪正齒輪的繪圖函式
    # midx 為齒輪圓心 x 座標
    # midy 為齒輪圓心 y 座標
    # rp 為節圓半徑, n 為齒數
    # pa 為壓力角 (deg)
    # rot 為旋轉角 (deg)
    # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷
    def Gear(self, midx, midy, rp, n=22, pa=20, color="black"):
        # 齒輪漸開線分成 15 線段繪製
        imax = 15
        # 畫出 rp 圓, 畫圓函式尚未定義
        # create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2)
        # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數
        # 模數也就是齒冠大小
        a=2*rp/n
        # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍
        d=2.5*rp/n
        # ra 為齒輪的外圍半徑
        ra=rp+a
        # 畫出 ra 圓, 畫圓函式尚未定義
        #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1)
        # rb 則為齒輪的基圓半徑
        # 基圓為漸開線長齒之基準圓
        rb=rp*math.cos(pa*deg)
        # 畫出 rb 圓 (基圓), 畫圓函式尚未定義
        #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1)
        # rd 為齒根圓半徑
        rd=rp-d
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義
        #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1)
        # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小
        # 將圓弧分成 imax 段來繪製漸開線
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        if rd&gt;rb:
            dr = (ra-rd)/imax
        else:
            dr=(ra-rb)/imax
        # tan(pa*deg)-pa*deg 為漸開線函數
        sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg
        for j in range(n):
            ang=-2.*j*math.pi/n+sigma
            ang2=2.*j*math.pi/n+sigma
            lxd=midx+rd*math.sin(ang2-2.*math.pi/n)
            lyd=midy-rd*math.cos(ang2-2.*math.pi/n)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(alpha-ang)
                ypt=r*math.cos(alpha-ang)
                xd=rd*math.sin(-ang)
                yd=rd*math.cos(-ang)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    lfx=midx+xpt
                    lfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # the line from last end of dedendum point to the recent
            # end of dedendum point
            # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標
            # 下列為齒根圓上用來近似圓弧的直線
            self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(ang2-alpha)
                ypt=r*math.cos(ang2-alpha)
                xd=rd*math.sin(ang2)
                yd=rd*math.cos(ang2)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    rfx=midx+xpt
                    rfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標
            # 下列為齒頂圓上用來近似圓弧的直線
            self.create_line(lfx,lfy,rfx,rfy,fill=color)
canvas = doc['onegear']
ctx = canvas.getContext("2d")
x = (canvas.width)/2
y = (canvas.height)/2
r = 250
# 齒數
n = 36
# 壓力角
pa = 20
Spur(ctx).Gear(x, y, r, n, pa, "blue")

ctx.beginPath()
ctx.lineWidth = "600"
ctx.strokeStyle = "white"
ctx.moveTo(0,600)
ctx.lineTo(800,600)
ctx.stroke()

ctx.beginPath()
ctx.fillStyle = "blue"
ctx.font = "50px ScriptS"
ctx.fillText("40423145 ",300,300)
ctx.stroke()

&lt;/script&gt;

&lt;h3&gt;2.第二個 800x600 的畫布, 請畫出只有一齒輪廓, 且充滿畫布 80% 範圍的正齒輪, 且該齒輪廓下方水平線, 連接兩端齒根圓點交的直線以紅色繪製, 且在齒輪下方以藍色字元寫上自己的學號.&lt;/h3&gt;
&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script src="../data/brython.js"&gt;&lt;/script&gt;

&lt;script src="../data/brython_stdlib.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 繪圖--&gt;

&lt;canvas id="onegear1" width="800" height="600"&gt;&lt;/canvas&gt;

&lt;div id="onegear_div" width="800" height="20"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# deg 為角度轉為徑度的轉換因子
deg = math.pi/180.
# 定義 Spur 類別
class Spur(object):
    def __init__(self, ctx):
        self.ctx = ctx

    def create_line(self, x1, y1, x2, y2, width=3, fill="red"):
        self.ctx.beginPath()
        self.ctx.lineWidth = width
        self.ctx.moveTo(x1, y1)
        self.ctx.lineTo(x2, y2)
        self.ctx.strokeStyle = fill
        self.ctx.stroke()
    #
    # 定義一個繪正齒輪的繪圖函式
    # midx 為齒輪圓心 x 座標
    # midy 為齒輪圓心 y 座標
    # rp 為節圓半徑, n 為齒數
    # pa 為壓力角 (deg)
    # rot 為旋轉角 (deg)
    # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷
    def Gear(self, midx, midy, rp, n=20, pa=20, color="black"):
        # 齒輪漸開線分成 15 線段繪製
        imax = 15
        # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線
        self.create_line(midx+rp, midy-rp, midx-rp, midy-rp)
        # 畫出 rp 圓, 畫圓函式尚未定義
        #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2)
        # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數
        # 模數也就是齒冠大小
        a=2*rp/n
        # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍
        d=2.5*rp/n
        # ra 為齒輪的外圍半徑
        ra=rp+a
        # 畫出 ra 圓, 畫圓函式尚未定義
        #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1)
        # rb 則為齒輪的基圓半徑
        # 基圓為漸開線長齒之基準圓
        rb=rp*math.cos(pa*deg)
        # 畫出 rb 圓 (基圓), 畫圓函式尚未定義
        #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1)
        # rd 為齒根圓半徑
        rd=rp-d
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義
        #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1)
        # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小
        # 將圓弧分成 imax 段來繪製漸開線
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        if rd&gt;rb:
            dr = (ra-rd)/imax
        else:
            dr=(ra-rb)/imax
        # tan(pa*deg)-pa*deg 為漸開線函數
        sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg
        for j in range(n):
            ang=-2.*j*math.pi/n+sigma
            ang2=2.*j*math.pi/n+sigma
            lxd=midx+rd*math.sin(ang2-2.*math.pi/n)
            lyd=midy-rd*math.cos(ang2-2.*math.pi/n)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(alpha-ang)
                ypt=r*math.cos(alpha-ang)
                xd=rd*math.sin(-ang)
                yd=rd*math.cos(-ang)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    lfx=midx+xpt
                    lfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # the line from last end of dedendum point to the recent
            # end of dedendum point
            # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標
            # 下列為齒根圓上用來近似圓弧的直線
            self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(ang2-alpha)
                ypt=r*math.cos(ang2-alpha)
                xd=rd*math.sin(ang2)
                yd=rd*math.cos(ang2)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    rfx=midx+xpt
                    rfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標
            # 下列為齒頂圓上用來近似圓弧的直線
            self.create_line(lfx,lfy,rfx,rfy,fill=color)
canvas = doc['onegear1']
ctx = canvas.getContext("2d")
x = (canvas.width)/2
y = (canvas.height)/2+2400
r = 8*(canvas.height/2)
# 齒數
n = 20
# 壓力角
pa = 20
Spur(ctx).Gear(x, y, r, n, pa, "black")

ctx.beginPath()
ctx.fillStyle = "#0000FF"
ctx.font = "20px ScriptS"
ctx.fillText("40423145 ",360,620)
ctx.stroke()
&lt;/script&gt;

&lt;h3&gt;3. 請各學員在各自 github 倉儲中的 data/py 目錄中, 編寫一個可以採圓心座標, 節圓半徑, 齒數, 壓力角與定位角度作為輸入的齒輪程式函式, 交由組長從各組員的 submodule 設定中呼叫導入, 以便在各分組的網頁中完成一個畫出所有組員協同繪圖的齒輪減速組圖, 且各齒輪正中心必須寫上組員學號, 各組按照學號大小排序, 分別由最右邊齒數 16 齒開始囓合, 依序增加 2 齒, 當排至平面四齒囓合後, 第五位組員則以垂直方向向下囓合兩個齒輪後, 轉由右至左水平排列, 直至所有組員均各提供一個協同囓合用的齒輪為止.&lt;/h3&gt;
&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script src="../data/Brython-3.3.1/brython.js"&gt;&lt;/script&gt;

&lt;script src="../data/Brython-3.3.1/brython_stdlib.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 繪圖--&gt;

&lt;canvas id="onegear2" width="800" height="600"&gt;&lt;/canvas&gt;

&lt;div id="onegear_div" width="800" height="200"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# deg 為角度轉為徑度的轉換因子
deg = math.pi/180.
# 定義 Spur 類別
class Spur(object):
    def __init__(self, ctx):
        self.ctx = ctx

    def create_line(self, x1, y1, x2, y2, width=3, fill="red"):
        self.ctx.beginPath()
        self.ctx.lineWidth = width
        self.ctx.moveTo(x1, y1)
        self.ctx.lineTo(x2, y2)
        self.ctx.strokeStyle = fill
        self.ctx.stroke()
    #
    # 定義一個繪正齒輪的繪圖函式
    # midx 為齒輪圓心 x 座標
    # midy 為齒輪圓心 y 座標
    # rp 為節圓半徑, n 為齒數
    # pa 為壓力角 (deg)
    # rot 為旋轉角 (deg)
    # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷
    def Gear(self, midx, midy, rp, n=20, pa=20, color="black"):
        # 齒輪漸開線分成 15 線段繪製
        imax = 15
        # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線
        self.create_line(midx, midy, midx, midy+rp)
        # 畫出 rp 圓, 畫圓函式尚未定義
        # create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2)
        # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數
        # 模數也就是齒冠大小
        a=2*rp/n
        # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍
        d=2.5*rp/n
        # ra 為齒輪的外圍半徑
        ra=rp+a
        # 畫出 ra 圓, 畫圓函式尚未定義
        #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1)
        # rb 則為齒輪的基圓半徑
        # 基圓為漸開線長齒之基準圓
        rb=rp*math.cos(pa*deg)
        # 畫出 rb 圓 (基圓), 畫圓函式尚未定義
        #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1)
        # rd 為齒根圓半徑
        rd=rp-d
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義
        #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1)
        # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小
        # 將圓弧分成 imax 段來繪製漸開線
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        if rd&gt;rb:
            dr = (ra-rd)/imax
        else:
            dr=(ra-rb)/imax
        # tan(pa*deg)-pa*deg 為漸開線函數
        sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg
        for j in range(n):
            ang=-2.*j*math.pi/n+sigma
            ang2=2.*j*math.pi/n+sigma
            lxd=midx+rd*math.sin(ang2-2.*math.pi/n)
            lyd=midy-rd*math.cos(ang2-2.*math.pi/n)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(alpha-ang)
                ypt=r*math.cos(alpha-ang)
                xd=rd*math.sin(-ang)
                yd=rd*math.cos(-ang)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    lfx=midx+xpt
                    lfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # the line from last end of dedendum point to the recent
            # end of dedendum point
            # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標
            # 下列為齒根圓上用來近似圓弧的直線
            self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(ang2-alpha)
                ypt=r*math.cos(ang2-alpha)
                xd=rd*math.sin(ang2)
                yd=rd*math.cos(ang2)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    rfx=midx+xpt
                    rfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標
            # 下列為齒頂圓上用來近似圓弧的直線
            self.create_line(lfx,lfy,rfx,rfy,fill=color)
canvas = doc['onegear2']
ctx = canvas.getContext("2d")
x = (canvas.width)/2
y = (canvas.height)/2
r = 100
# 齒數
n = 24
# 壓力角
pa = 20
Spur(ctx).Gear(x, y, r, n, pa, "goldenrod")
&lt;/script&gt;</summary><category term="w15"></category></entry><entry><title>2017springcd 第十四週</title><link href="./2017springcd-di-shi-si-zhou.html" rel="alternate"></link><updated>2017-05-25T00:00:00+08:00</updated><author><name>40423145</name></author><id>tag:,2017-05-25:./2017springcd-di-shi-si-zhou.html</id><summary type="html">&lt;p&gt;&lt;b&gt;&lt;font color="blue"&gt;無&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;
</summary><category term="w14"></category></entry><entry><title>2017springcd 第十三週</title><link href="./2017springcd-di-shi-san-zhou.html" rel="alternate"></link><updated>2017-05-18T00:00:00+08:00</updated><author><name>40423145</name></author><id>tag:,2017-05-18:./2017springcd-di-shi-san-zhou.html</id><summary type="html">&lt;p&gt;&lt;b&gt;&lt;font color="blue"&gt;繪製4個正齒輪&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;


&lt;h2&gt;繪製2D 正齒輪&lt;/h2&gt;
&lt;p&gt;齒數分別為17t-11t-13t-14t&lt;/p&gt;
&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script src="../data/Brython-3.3.1/brython.js"&gt;&lt;/script&gt;

&lt;script src="../data/Brython-3.3.1/brython_stdlib.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 繪圖--&gt;

&lt;canvas id='gear3' width='800' height='400'&gt;&lt;/canvas&gt;

&lt;script type="text/python3"&gt;
# 導入 browser 模組中的 document, 並設為 doc 變數
from browser import document as doc
import math
# deg 為角度轉為徑度的轉換因子
deg = math.pi/180.
# 定義 Spur 類別
class Spur(object):
    def __init__(self, ctx):
        self.ctx = ctx

    def create_line(self, x1, y1, x2, y2, width=3, fill="red"):
        self.ctx.beginPath()
        self.ctx.lineWidth = width
        self.ctx.moveTo(x1, y1)
        self.ctx.lineTo(x2, y2)
        self.ctx.strokeStyle = fill
        self.ctx.stroke()
    #
    # 定義一個繪正齒輪的繪圖函式
    # midx 為齒輪圓心 x 座標
    # midy 為齒輪圓心 y 座標
    # rp 為節圓半徑, n 為齒數
    # pa 為壓力角 (deg)
    # rot 為旋轉角 (deg)
    # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷
    def Gear(self, midx, midy, rp, n=20, pa=20, color="black"):
        # 齒輪漸開線分成 15 線段繪製
        imax = 15
        # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線
        self.create_line(midx, midy, midx, midy-rp)
        # 畫出 rp 圓, 畫圓函式尚未定義
        #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2)
        # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數
        # 模數也就是齒冠大小
        a=2*rp/n
        # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍
        d=2.5*rp/n
        # ra 為齒輪的外圍半徑
        ra=rp+a
        # 畫出 ra 圓, 畫圓函式尚未定義
        #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1)
        # rb 則為齒輪的基圓半徑
        # 基圓為漸開線長齒之基準圓
        rb=rp*math.cos(pa*deg)
        # 畫出 rb 圓 (基圓), 畫圓函式尚未定義
        #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1)
        # rd 為齒根圓半徑
        rd=rp-d
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義
        #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1)
        # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小
        # 將圓弧分成 imax 段來繪製漸開線
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        if rd&gt;rb:
            dr = (ra-rd)/imax
        else:
            dr=(ra-rb)/imax
        # tan(pa*deg)-pa*deg 為漸開線函數
        sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg
        for j in range(n):
            ang=-2.*j*math.pi/n+sigma
            ang2=2.*j*math.pi/n+sigma
            lxd=midx+rd*math.sin(ang2-2.*math.pi/n)
            lyd=midy-rd*math.cos(ang2-2.*math.pi/n)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(alpha-ang)
                ypt=r*math.cos(alpha-ang)
                xd=rd*math.sin(-ang)

                yd=rd*math.cos(-ang)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    lfx=midx+xpt
                    lfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # the line from last end of dedendum point to the recent
            # end of dedendum point
            # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標
            # 下列為齒根圓上用來近似圓弧的直線
            self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(ang2-alpha)
                ypt=r*math.cos(ang2-alpha)
                xd=rd*math.sin(ang2)
                yd=rd*math.cos(ang2)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    rfx=midx+xpt
                    rfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標
            # 下列為齒頂圓上用來近似圓弧的直線
            self.create_line(lfx,lfy,rfx,rfy,fill=color)

# 準備在 id="gear3" 的 canvas 中繪圖
canvas = doc["gear3"]
ctx = canvas.getContext("2d")

# 模數決定齒的尺寸大小, 囓合齒輪組必須有相同的模數與壓力角
# 壓力角 pa 單位為角度
pa = 20
# 第1齒輪齒數
n_g1 = 17
# 第2齒輪齒數
n_g2 = 11
# 第3齒輪齒數
n_g3 = 13
# 第4齒輪齒數
n_g4 = 15
# m 為模數, 根據畫布的寬度, 計算適合的模數大小
m = (0.8*canvas.width)/(n_g1+n_g2+n_g3+n_g4)
# 根據模數 m, 計算各齒輪的節圓半徑
rp_g1 = m*n_g1/2
rp_g2 = m*n_g2/2
rp_g3 = m*n_g3/2
rp_g4 = m*n_g4/2
#單一正齒輪繪圖呼叫格式 Spur(ctx).Gear(x, y, r, n, pa, "blue")
# 開始繪製囓合齒輪輪廓
# 繪圖第1齒輪的圓心座標, 因為希望繪圖佔去 canvas.width 的 80%, 所以兩邊各預留 10% 距離
x_g1 = canvas.width*0.1+rp_g1
# y 方向繪圖區域上方預留 canvas.height 的 10%
y_g1 = canvas.height*0.1+rp_g1
# 第2齒輪的圓心座標, 假設排列成水平, 表示各齒輪圓心 y 座標相同
x_g2 = x_g1 + rp_g1 + rp_g2
y_g2 = y_g1
# 第3齒輪的圓心座標
x_g3 = x_g1 + rp_g1 + 2*rp_g2 + rp_g3
y_g3 = y_g1
# 第4齒輪的圓心座標
x_g4 = x_g1 + rp_g1 + 2*rp_g2 + rp_g3
y_g4 = y_g1 + 2.1*rp_g3 

# 將第1齒輪順時鐘轉 90 度, 也就是 math.pi/2
# 使用 ctx.save() 與 ctx.restore() 以確保各齒輪以相對座標進行旋轉繪圖
ctx.save()
# translate to the origin of second gear
ctx.translate(x_g1, y_g1)
# rotate to engage
ctx.rotate(math.pi/2)
# put it back
ctx.translate(-x_g1, -y_g1)
# 繪製第一個齒輪輪廓
Spur(ctx).Gear(x_g1, y_g1, rp_g1, n_g1, pa, "green")
ctx.restore()

# 將第2齒輪逆時鐘轉 90 度之後, 再多轉一齒, 以便與第1齒輪進行囓合
ctx.save()
# translate to the origin of second gear
ctx.translate(x_g2, y_g2)
# rotate to engage
ctx.rotate(-math.pi/2-math.pi/n_g2)
# put it back
ctx.translate(-x_g2, -y_g2)
Spur(ctx).Gear(x_g2, y_g2, rp_g2, n_g2, pa, "red")
ctx.restore()

# 將第3齒輪逆時鐘轉 90 度之後, 再往回轉第2齒輪定位帶動轉角, 然後再逆時鐘多轉一齒, 以便與第2齒輪進行囓合
ctx.save()
# translate to the origin of second gear
ctx.translate(x_g3, y_g3)
# rotate to engage
# math.pi+math.pi/n_g2 為第2齒輪從順時鐘轉 90 度之後, 必須配合目前的標記線所作的齒輪 2 轉動角度, 要轉換到齒輪3 的轉動角度
# 必須乘上兩齒輪齒數的比例, 若齒輪2 大, 則齒輪3 會轉動較快
# 第1個 -math.pi/2 為將原先垂直的第3齒輪定位線逆時鐘旋轉 90 度
# -math.pi/n_g3 則是第3齒與第2齒定位線重合後, 必須再逆時鐘多轉一齒的轉角, 以便進行囓合
# (math.pi+math.pi/n_g2)*n_g2/n_g3 則是第2齒原定位線為順時鐘轉動 90 度, 
# 但是第2齒輪為了與第1齒輪囓合, 已經距離定位線, 多轉了 180 度, 再加上第2齒輪的一齒角度, 因為要帶動第3齒輪定位, 
# 這個修正角度必須要再配合第2齒與第3齒的轉速比加以轉換成第3齒輪的轉角, 因此乘上 n_g2/n_g3
ctx.rotate(-math.pi/2-math.pi/n_g3+(math.pi+math.pi/n_g2)*n_g2/n_g3)
# put it back
ctx.translate(-x_g3, -y_g3)
Spur(ctx).Gear(x_g3, y_g3, rp_g3, n_g3, pa, "black")
ctx.restore()

# 將第4齒輪逆時鐘轉 90 度之後, 再往回轉第3齒輪定位帶動轉角, 然後再逆時鐘多轉一齒, 以便與第2齒輪進行囓合
ctx.save()
# translate to the origin of second gear
ctx.translate(x_g4, y_g4)
# rotate to engage
# math.pi+math.pi/n_g3 為第3齒輪從順時鐘轉 90 度之後, 必須配合目前的標記線所作的齒輪 3 轉動角度, 要轉換到齒輪 4 的轉動角度
# 必須乘上兩齒輪齒數的比例, 若齒輪3 大, 則齒輪4 會轉動較快
# 第1個 -math.pi/2 為將原先垂直的第4齒輪定位線逆時鐘旋轉 90 度
# -math.pi/n_g4 則是第3齒與第2齒定位線重合後, 必須再逆時鐘多轉一齒的轉角, 以便進行囓合
# (math.pi+math.pi/n_g3)*n_g3/n_g4 則是第2齒原定位線為順時鐘轉動 90 度, 
# 但是第2齒輪為了與第1齒輪囓合, 已經距離定位線, 多轉了 180 度, 再加上第2齒輪的一齒角度, 因為要帶動第3齒輪定位, 
# 這個修正角度必須要再配合第2齒與第3齒的轉速比加以轉換成第3齒輪的轉角, 因此乘上 n_g3/n_g4
ctx.rotate(-math.pi/2-math.pi/n_g4+(math.pi+math.pi/n_g3)*n_g3/n_g4)
# put it back
ctx.translate(-x_g4, -y_g4)
Spur(ctx).Gear(x_g4, y_g4, rp_g4, n_g4, pa, "blue")
ctx.restore()
&lt;/script&gt;</summary><category term="w13"></category></entry><entry><title>2017springcd 第十二週</title><link href="./2017springcd-di-shi-er-zhou.html" rel="alternate"></link><updated>2017-05-11T00:00:00+08:00</updated><author><name>40423145</name></author><id>tag:,2017-05-11:./2017springcd-di-shi-er-zhou.html</id><summary type="html">&lt;p&gt;&lt;b&gt;&lt;font color="blue"&gt;2D 正齒輪繪圖&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;


&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script src="../data/Brython-3.3.1/brython.js"&gt;&lt;/script&gt;

&lt;script src="../data/Brython-3.3.1/brython_stdlib.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 繪圖--&gt;

&lt;canvas id="onegear" width="800" height="600"&gt;&lt;/canvas&gt;

&lt;div id="onegear_div" width="800" height="20"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# deg 為角度轉為徑度的轉換因子
deg = math.pi/180.
# 定義 Spur 類別
class Spur(object):
    def __init__(self, ctx):
        self.ctx = ctx

    def create_line(self, x1, y1, x2, y2, width=3, fill="red"):
        self.ctx.beginPath()
        self.ctx.lineWidth = width
        self.ctx.moveTo(x1, y1)
        self.ctx.lineTo(x2, y2)
        self.ctx.strokeStyle = fill
        self.ctx.stroke()
    #
    # 定義一個繪正齒輪的繪圖函式
    # midx 為齒輪圓心 x 座標
    # midy 為齒輪圓心 y 座標
    # rp 為節圓半徑, n 為齒數
    # pa 為壓力角 (deg)
    # rot 為旋轉角 (deg)
    # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷
    def Gear(self, midx, midy, rp, n=20, pa=20, color="black"):
        # 齒輪漸開線分成 15 線段繪製
        imax = 15
        # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線
        self.create_line(midx, midy, midx, midy-rp)
        # 畫出 rp 圓, 畫圓函式尚未定義
        #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2)
        # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數
        # 模數也就是齒冠大小
        a=2*rp/n
        # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍
        d=2.5*rp/n
        # ra 為齒輪的外圍半徑
        ra=rp+a
        # 畫出 ra 圓, 畫圓函式尚未定義
        #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1)
        # rb 則為齒輪的基圓半徑
        # 基圓為漸開線長齒之基準圓
        rb=rp*math.cos(pa*deg)
        # 畫出 rb 圓 (基圓), 畫圓函式尚未定義
        #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1)
        # rd 為齒根圓半徑
        rd=rp-d
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義
        #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1)
        # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小
        # 將圓弧分成 imax 段來繪製漸開線
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        if rd&gt;rb:
            dr = (ra-rd)/imax
        else:
            dr=(ra-rb)/imax
        # tan(pa*deg)-pa*deg 為漸開線函數
        sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg
        for j in range(n):
            ang=-2.*j*math.pi/n+sigma
            ang2=2.*j*math.pi/n+sigma
            lxd=midx+rd*math.sin(ang2-2.*math.pi/n)
            lyd=midy-rd*math.cos(ang2-2.*math.pi/n)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(alpha-ang)
                ypt=r*math.cos(alpha-ang)
                xd=rd*math.sin(-ang)
                yd=rd*math.cos(-ang)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    lfx=midx+xpt
                    lfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # the line from last end of dedendum point to the recent
            # end of dedendum point
            # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標
            # 下列為齒根圓上用來近似圓弧的直線
            self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(ang2-alpha)
                ypt=r*math.cos(ang2-alpha)
                xd=rd*math.sin(ang2)
                yd=rd*math.cos(ang2)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    rfx=midx+xpt
                    rfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標
            # 下列為齒頂圓上用來近似圓弧的直線
            self.create_line(lfx,lfy,rfx,rfy,fill=color)
canvas = doc['onegear']
ctx = canvas.getContext("2d")
x = (canvas.width)/2
y = (canvas.height)/2
r = 0.8*(canvas.height/2)
# 齒數
n = 17
# 壓力角
pa = 20
Spur(ctx).Gear(x, y, r, n, pa, "blue")
# 以下列出 W11 2B 未出席人數
data = open("./../data/w11/2b0503.txt", encoding="utf-8").read()
count = 0
# 去掉前面兩列
student = data.split("\n")[2:]
for i in range(len(student)):
    each = student[i].split("\t")
    if each[1] != "出席":
        count = count + 1
#print(count)
div = doc["onegear_div"]
div &lt;= "2b: " +  str(count) + "/" + str(len(student))
&lt;/script&gt;

&lt;!-- 以下處理 Cango Spur Gear --&gt;

&lt;!-- Cango 程式庫 --&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
_old/Cango-8v03.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
_old/Cango2D-7v01-min.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
_old/CangoAxes-1v33.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
_old/CangoAnimation-4v01.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
_old/gearUtils-05.js"&gt;&lt;/script&gt;

&lt;canvas id='cango_gear' width='800' height='750'&gt;&lt;/canvas&gt;

&lt;script type="text/python"&gt;
# 將 導入的 document 設為 doc 主要原因在於與舊程式碼相容
from browser import document as doc
# 由於 Python3 與 Javascript 程式碼已經不再混用, 因此來自 Javascript 的變數, 必須居中透過 window 物件轉換
from browser import window
import math

# 主要用來取得畫布大小
canvas = doc["cango_gear"]
# 此程式採用 Cango Javascript 程式庫繪圖, 因此無需 ctx
#ctx = canvas.getContext("2d")
cango = window.Cango.new
# 針對變數的轉換, shapeDefs 在 Cango 中資料型別為變數, 可以透過 window 轉換
shapedefs = window.shapeDefs
# 目前 Cango 結合 Animation 在 Brython 尚無法運作, 此刻只能繪製靜態圖形
# in CangoAnimation.js
#interpolate1 = window.interpolate
# Cobi 與 createGearTooth 都是 Cango Javascript 程式庫中的物件
cobj = window.Cobj.new
creategeartooth = window.createGearTooth.new
# 經由 Cango 轉換成 Brython 的 cango, 指定將圖畫在 id="cango_gear" 的 canvas 上
cgo = cango("cango_gear")

######################################
# 畫正齒輪輪廓
#####################################
# n 為齒數
n = 17
# pa 為壓力角
pa = 25
# m 為模數, 根據畫布的寬度, 計算適合的模數大小
# Module = mm of pitch diameter per tooth
m = 0.8*canvas.width/n
# pr 為節圓半徑
pr = n*m/2 # gear Pitch radius
# generate gear
data = creategeartooth(m, n, pa)
# Brython 程式中的 print 會將資料印在 Browser 的 console 區
#print(data)
gearTooth = cobj(data, "SHAPE", {
        "fillColor":"#ddd0dd",
        "border": True,
        "strokeColor": "#606060" })
gearTooth.rotate(180/n) # rotate gear 1/2 tooth to mesh
# 單齒的齒形資料經過旋轉後, 將資料複製到 gear 物件中
gear = gearTooth.dup()
# gear 為單一齒的輪廓資料
#cgo.render(gearTooth)

# 利用單齒輪廓旋轉, 產生整個正齒輪外形
for i in range(1, n):
    # 將 gearTooth 中的資料複製到 newTooth
    newTooth = gearTooth.dup()
    # 配合迴圈, newTooth 的齒形資料進行旋轉, 然後利用 appendPath 方法, 將資料併入 gear
    newTooth.rotate(360*i/n)
    # appendPath 為 Cango 程式庫中的方法, 第二個變數為 True, 表示要刪除最前頭的 Move to SVG Path 標註符號
    gear.appendPath(newTooth, True) # trim move command = True

# 建立軸孔
# add axle hole, hr 為 hole radius
hr = 0.6*pr # diameter of gear shaft
shaft = cobj(shapedefs.circle(hr), "PATH")
shaft.revWinding()
gear.appendPath(shaft) # retain the 'moveTo' command for shaft sub path
cx = canvas.width/2
cy = canvas.height/2
gear.translate(cx, cy)
# render 繪出靜態正齒輪輪廓
cgo.render(gear)
&lt;/script&gt;</summary><category term="w12"></category></entry><entry><title>2017springcd 第十二週-2</title><link href="./2017springcd-di-shi-er-zhou-2.html" rel="alternate"></link><updated>2017-05-11T00:00:00+08:00</updated><author><name>40423145</name></author><id>tag:,2017-05-11:./2017springcd-di-shi-er-zhou-2.html</id><summary type="html">&lt;p&gt;&lt;b&gt;&lt;font color="blue"&gt;齒輪&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;


&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;p&gt;1.為何需要減速機?&lt;/p&gt;
&lt;p&gt;2.何謂漸開線?&lt;/p&gt;
&lt;p&gt;3.如何畫漸開線正齒輪輪廓?&lt;/p&gt;
&lt;p&gt;4.如何模擬 2D 正齒輪組囓合？&lt;/p&gt;
&lt;p&gt;5.如何模擬 3D 正齒輪組囓合？&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h2&gt;1.為何需要減速機?&lt;/h2&gt;
&lt;p&gt;1、在工業自動化應用的過程中，很多時候都會用到，低速大扭矩精準控制，這種場合一般都會用到減速機，在高速小扭矩的工況下，一般不用加減速機。&lt;/p&gt;
&lt;p&gt;2、電機配減速機是為了提高轉矩，當負載很大時，一味的提高伺服電機的功率是很不划算的事情，所以在需要的速度範圍內選適用的減速比的減速機，減速機本身就是為了速度減慢和提高輸出扭矩的作用。&lt;/p&gt;
&lt;p&gt;3、我們想要理想的扭矩，要麼要一個大的伺服，要麼要一個小的伺服加一個減速機，結果一般是一個伺服加一個減速機的成本小於一個大號伺服的價格。&lt;/p&gt;
&lt;p&gt;4、減速機在傳動中有維護電機的效果，運轉中減速機接受較大扭矩，過載時傳遞到電機只要過載量除以減速比的數值，若直接由電機承當能夠會惹起電機的損壞。&lt;/p&gt;
&lt;h2&gt;2.何謂漸開線?&lt;/h2&gt;
&lt;p&gt;漸開線實際上是一捲繞在圓上之線往外拉開時，在同一點所走過的軌跡，亦即以一基圓為迴轉的平台，往外伸張的曲線。&lt;/p&gt;
&lt;h2&gt;3.如何畫漸開線正齒輪輪廓?&lt;/h2&gt;
&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script src="../data/Brython-3.3.1/brython.js"&gt;&lt;/script&gt;

&lt;script src="../data/Brython-3.3.1/brython_stdlib.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 繪圖--&gt;

&lt;canvas id="onegear" width="600" height="600"&gt;&lt;/canvas&gt;

&lt;div id="onegear_div" width="800" height="20"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# deg 為角度轉為徑度的轉換因子
deg = math.pi/180.
# 定義 Spur 類別
class Spur(object):
    def __init__(self, ctx):
        self.ctx = ctx

    def create_line(self, x1, y1, x2, y2, width=3, fill="red"):
        self.ctx.beginPath()
        self.ctx.lineWidth = width
        self.ctx.moveTo(x1, y1)
        self.ctx.lineTo(x2, y2)
        self.ctx.strokeStyle = fill
        self.ctx.stroke()
    #
    # 定義一個繪正齒輪的繪圖函式
    # midx 為齒輪圓心 x 座標
    # midy 為齒輪圓心 y 座標
    # rp 為節圓半徑, n 為齒數
    # pa 為壓力角 (deg)
    # rot 為旋轉角 (deg)
    # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷
    def Gear(self, midx, midy, rp, n=17, pa=20, color="black"):
        # 齒輪漸開線分成 15 線段繪製
        imax = 15
        # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線
        self.create_line(midx, midy, midx, midy-rp)
        # 畫出 rp 圓, 畫圓函式尚未定義
        #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2)
        # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數
        # 模數也就是齒冠大小
        a=2*rp/n
        # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍
        d=2.5*rp/n
        # ra 為齒輪的外圍半徑
        ra=rp+a
        # 畫出 ra 圓, 畫圓函式尚未定義
        #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1)
        # rb 則為齒輪的基圓半徑
        # 基圓為漸開線長齒之基準圓
        rb=rp*math.cos(pa*deg)
        # 畫出 rb 圓 (基圓), 畫圓函式尚未定義
        #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1)
        # rd 為齒根圓半徑
        rd=rp-d
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義
        #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1)
        # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小
        # 將圓弧分成 imax 段來繪製漸開線
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        if rd&gt;rb:
            dr = (ra-rd)/imax
        else:
            dr=(ra-rb)/imax
        # tan(pa*deg)-pa*deg 為漸開線函數
        sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg
        for j in range(n):
            ang=-2.*j*math.pi/n+sigma
            ang2=2.*j*math.pi/n+sigma
            lxd=midx+rd*math.sin(ang2-2.*math.pi/n)
            lyd=midy-rd*math.cos(ang2-2.*math.pi/n)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(alpha-ang)
                ypt=r*math.cos(alpha-ang)
                xd=rd*math.sin(-ang)
                yd=rd*math.cos(-ang)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    lfx=midx+xpt
                    lfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # the line from last end of dedendum point to the recent
            # end of dedendum point
            # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標
            # 下列為齒根圓上用來近似圓弧的直線
            self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr

                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(ang2-alpha)
                ypt=r*math.cos(ang2-alpha)
                xd=rd*math.sin(ang2)
                yd=rd*math.cos(ang2)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    rfx=midx+xpt
                    rfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標
            # 下列為齒頂圓上用來近似圓弧的直線
            self.create_line(lfx,lfy,rfx,rfy,fill=color)

canvas = doc['onegear']
ctx = canvas.getContext("2d")
x = (canvas.width)/2
y = (canvas.height)/2
r = 0.8*(canvas.height/4)
# 齒數
n = 17
# 壓力角
pa = 20
Spur(ctx).Gear(x, y, r, n, pa, "blue")
&lt;/script&gt;

&lt;h2&gt;4.如何模擬 2D 正齒輪組囓合？&lt;/h2&gt;
&lt;!-- 以下處理 Cango Spur Gear --&gt;

&lt;!-- Cango 程式庫 --&gt;

&lt;script type="text/javascript" src="./../data/cango
/Cango-9v05-min.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/cango
/CangoAxes-2v09.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/cango
/CangoAnimation-5v00.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/cango
/gearUtils-05.js"&gt;&lt;/script&gt;

&lt;canvas id='cango_gear' width='800' height='750'&gt;&lt;/canvas&gt;

&lt;script type="text/python"&gt;
# 將 導入的 document 設為 doc 主要原因在於與舊程式碼相容
from browser import document as doc
# 由於 Python3 與 Javascript 程式碼已經不再混用, 因此來自 Javascript 的變數, 必須居中透過 window 物件轉換
from browser import window
import math

# 主要用來取得畫布大小
canvas = doc["cango_gear"]
# 此程式採用 Cango Javascript 程式庫繪圖, 因此無需 ctx
ctx = canvas.getContext("2d")
cango = window.Cango.new
# 針對變數的轉換, shapeDefs 在 Cango 中資料型別為變數, 可以透過 window 轉換
shapedefs = window.shapeDefs
# 目前 Cango 結合 Animation 在 Brython 尚無法運作, 此刻只能繪製靜態圖形
# in CangoAnimation.js
#interpolate1 = window.interpolate
# Cobi 與 createGearTooth 都是 Cango Javascript 程式庫中的物件
#cobj = window.Cobj.new
shape = window.Shape.new
path = window.Path.new
creategeartooth = window.createGearTooth.new
tweener = window.Tweener.new
# 經由 Cango 轉換成 Brython 的 cango, 指定將圖畫在 id="cango_gear" 的 canvas 上
cgo = cango("cango_gear")

######################################
# 畫正齒輪輪廓
#####################################
# n 為齒數
n = 11
# pa 為壓力角
pa = 25
# m 為模數, 根據畫布的寬度, 計算適合的模數大小
# Module = mm of pitch diameter per tooth
m = 0.4*canvas.width/n
# pr 為節圓半徑
pr = n*m/2 # gear Pitch radius
# generate gear
data = creategeartooth(m, n, pa)
# Brython 程式中的 print 會將資料印在 Browser 的 console 區
#print(data)
gearTooth = shape(data, {
  "fillColor":"#ddd0dd",
  "border": True,
  "strokeColor": "#606060" })
gearTooth.rotate(180/n) # rotate gear 1/2 tooth to mesh
# 單齒的齒形資料經過旋轉後, 將資料複製到 gear 物件中
gear = gearTooth.dup()
# gear 為單一齒的輪廓資料
#cgo.render(gearTooth)

# 利用單齒輪廓旋轉, 產生整個正齒輪外形
for i in range(1, n):
    # 將 gearTooth 中的資料複製到 newTooth
    newTooth = gearTooth.dup()
 # 配合迴圈, newTooth 的齒形資料進行旋轉, 然後利用 appendPath 方法, 將資料併入 gear
    newTooth.rotate(360*i/n)
    # appendPath 為 Cango 程式庫中的方法, 第二個變數為 True, 表示要刪除最前頭的 Move to SVG Path 標註符號
    gear.appendPath(newTooth, True) # trim move command = True

# 建立軸孔
# add axle hole, hr 為 hole radius
hr = 0.6*pr # diameter of gear shaft
shaft = path(shapedefs.circle(hr))
shaft.revWinding()
gear.appendPath(shaft) # retain the 'moveTo' command for shaft sub path

# setup the animation
# backlash (mm)
bklsh = 0.04*m
# centre shift to make backlash
dC = bklsh/(3*math.tan(math.pi*pa/180))
# np 為小齒輪齒數
np = 13
# gear ratio
gr = n/np              
gearConfig = {'cx':-pr, 'cy':0, 'degs':[0, 360]}
# gr*0.666 rpm
#pinionConfig = {'cx':pr+dC, 'cy':0, 'degs':[0, -gr*360]}
# 0.666 rpm
twnr = tweener(0, 90000, "loop")

cx = canvas.width/2
cy = canvas.height/2
#gear.translate(cx, cy)
# render 繪出靜態正齒輪輪廓
#cgo.render(gear)
#cgo.render(gear2)
#cgo.render(gear3)
# 利用 gear 資料複製一份, 命名為 gear
gear1 = gear.dup()
gear2 = gear1.dup()
gear3 = gear1.dup()
from time import time
from browser.timer import request_animation_frame as raf
from browser.timer import set_interval

deg = math.pi/180

def draw():
    cgo.clearCanvas()
    gear.rotate(2*deg)
    # 在特定位置, 以特定 scale, 特定 degs 執行 render
    cgo.render(gear, {'x':cx-pr/2, 'y':cy, 'scl':0.5, 'degs':0})
    gear1.rotate(-2*deg)
    cgo.render(gear1, {'x':cx+pr*2*0.5-pr/2, 'y':cy, 'scl':0.5, 'degs':0})
    gear2.rotate(2*deg)
    cgo.render(gear2, {'x':cx+pr*2*0.5*2-pr/2, 'y':cy, 'scl':0.5, 'degs':0})
    gear3.rotate(-2*deg)
    cgo.render(gear3, {'x':cx+pr*2*0.5*2-pr/2, 'y':1.43*cy, 'scl':0.5, 'degs':147})

set_interval(draw, 2)
&lt;/script&gt;

&lt;h2&gt;5.如何模擬 3D 正齒輪組囓合？&lt;/h2&gt;</summary><category term="w12"></category></entry><entry><title>2017springcd 第十一週</title><link href="./2017springcd-di-shi-yi-zhou.html" rel="alternate"></link><updated>2017-05-04T00:00:00+08:00</updated><author><name>40423145</name></author><id>tag:,2017-05-04:./2017springcd-di-shi-yi-zhou.html</id><summary type="html">&lt;p&gt;&lt;b&gt;&lt;font color="blue"&gt;無&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;
</summary><category term="w11"></category></entry><entry><title>2017springcd 第十週</title><link href="./2017springcd-di-shi-zhou.html" rel="alternate"></link><updated>2017-04-27T00:00:00+08:00</updated><author><name>40423145</name></author><id>tag:,2017-04-27:./2017springcd-di-shi-zhou.html</id><summary type="html">&lt;p&gt;&lt;b&gt;&lt;font color="blue"&gt;Brython 動態模擬&amp;amp;+-*/&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;


&lt;h3&gt;轉為 Brython 繪圖的模擬應用-機械手臂&lt;/h3&gt;
&lt;!-- 導入 Brython 標準程式庫 3.3.1 --&gt;

&lt;script type="text/javascript" src="./../data/brython_dist.js"&gt;
&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/Cango-8v05-min.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/Cango2D-7v04-min.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/CangoAnimation-4v01.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 Brython 時, 設定 pythonpath 為 data/py --&gt;

&lt;script&gt;
window.onload=function(){
// 此地可以透過 github 的 submodule 設定, 分別導入各組員的協同網際程式
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;canvas id='robot' width='800' height='400'&gt;&lt;/canvas&gt;

&lt;script type="text/python"&gt;
from javascript import JSConstructor
from browser import window

cango2d = JSConstructor(window.Cango2D)
shapedefs = window.shapeDefs
obj2d = JSConstructor(window.Obj2D)
tweener = JSConstructor(window.Tweener)

cgo = cango2d("robot")
# 清除畫面
cgo.clearCanvas("lightyellow")
cgo.setWorldCoords(-50, -50, 300)

# 加上基軸與第一桿
# 畫筆移到 -20, -10, 畫直線到 -10,-10 以及 -10,0 
standData = ['M', -20,-10, 'L', -10,-10, -10,0, 'A', 10,10,0,0,0,10,0, 'L',10,-10, 20,-10, 20,-40, -20,-40,'z']
stand = obj2d(standData, "SHAPE", {
        "fillColor":'darkgray',
        "border": True,
        "strokeColor": "#222222" })
axle0 = obj2d(shapedefs.circle(10), "SHAPE", {
        "fillColor":'gray',
        "border": True,
        "strokeColor": "#222222" })
armGrp = cgo.createGroup2D(stand, axle0)

segData = ['M',0,-8, 'A',8,8,0,0,0,0,8, 'L',50,8, 'A',8,8,0,0,0,50,-8, 'Z']
seg1 = obj2d(segData, "SHAPE", {
        "fillColor":'darkGray',
        "border": True,
        "strokeColor": "#222222",
        "zIndex": -1 })
# 利用 zIndex 決定疊層的先後次序
axle1 = obj2d(shapedefs.circle(8), "SHAPE", {
        "fillColor":'gray',
        "border": True,
        "strokeColor": "#222222",
        "zIndex": 1 })
axle1.translate(50, 0)
seg1Grp = cgo.createGroup2D(seg1, axle1)
armGrp.addObj(seg1Grp)

# 加上第二軸
seg2 = obj2d(segData, "SHAPE", {
        "fillColor":'darkGray',
        "border": True,
        "strokeColor": "#222222",
        "zIndex": -1 })
axle2 = obj2d(shapedefs.circle(8), "SHAPE", {
        "fillColor":'gray',
        "border": True,
        "strokeColor": "#222222",
        "zIndex": 1 })
axle2.translate(50, 0)
seg2Grp = cgo.createGroup2D(seg2, axle2)
cgo.render(seg2Grp)
# 請注意 seg2Grp 加上 seg1Grp 物件上
seg1Grp.addObj(seg2Grp)

seg3 = obj2d(segData, "SHAPE", {
        'fillColor':'darkGray',
        'border': True,
        'strokeColor': "#222222",
        'zIndex': -1 })
axle3 = obj2d(shapedefs.circle(6), "SHAPE", {
        'fillColor':'gray',
        'border': True,
        'strokeColor': "#222222",
        'zIndex': 1 })
axle3.translate(50, 0)
seg3Grp = cgo.createGroup2D(seg3, axle3)
seg2Grp.addObj(seg3Grp)

seg4Data = ['M',0,-6, 'A',6,6,0,0,0,0,6, 'L',40,6, 40,12, 50,12, 50,-12, 40,-12, 40,-6, 'Z']
seg4 = obj2d(seg4Data, "SHAPE", {
        'fillColor':'darkGray',
        'border': True,
        'strokeColor': "#222222",
        'zIndex': -1 })
seg3Grp.addObj(seg4)

# setup animation
animData = {'s1': [0, 80, 45, 0],
                  's2': [0, -60, -60, 0],
                  's3': [0, -90, 0, 90, 0],
                  's4': [0, 30, -90, 0]}

armTwnr = tweener(0, 3500, 'loop')

def initArm(opts):
    seg2Grp.transform.translate(50,0)
    seg3Grp.transform.translate(50,0)
    seg4.transform.translate(50,0)


def armPathFn(time, opts):
    seg1Rot = armTwnr.getVal(time, opts.s1)
    seg2Rot = armTwnr.getVal(time, opts.s2)
    seg3Rot = armTwnr.getVal(time, opts.s3)
    seg4Rot = armTwnr.getVal(time, opts.s4)

    seg1Grp.transform.rotate(seg1Rot)
    seg2Grp.transform.rotate(seg2Rot)
    seg2Grp.transform.translate(50,0)
    seg3Grp.transform.rotate(seg3Rot)
    seg3Grp.transform.translate(50,0)
    seg4.transform.rotate(seg4Rot)
    seg4.transform.translate(50,0)

cgo.animate(armGrp, initArm, armPathFn, animData)
cgo.playAnimation()
&lt;/script&gt;

&lt;h2&gt;1.+法運算&lt;/h2&gt;
&lt;p&gt;+法程式碼(add.py)
&lt;pre class="brush: python"&gt;
def add (a,b): //def用於定義函式和類型的方法
    return a+b //將a+b值傳回主程式中
&lt;/pre&gt;
+法程式碼(print.py)
&lt;pre class="brush: python"&gt;
import sys //插入sys檔案中所有函式
sys.path.append("./m1")//資料夾路徑
import add //導入 add.py&lt;/p&gt;
&lt;p&gt;sum = add.add (1,2) //乘法演算&lt;/p&gt;
&lt;p&gt;print(sum) //輸出結果
&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;2.-法運算&lt;/h2&gt;
&lt;p&gt;-法程式碼(add.py)
&lt;pre class="brush: python"&gt;
def add (a,b): //def用於定義函式和類型的方法
    return a-b //將a-b值傳回主程式中
&lt;/pre&gt;
-法程式碼(print.py)
&lt;pre class="brush: python"&gt;
import sys //插入sys檔案中所有函式
sys.path.append("./m1") //資料夾路徑
import add //導入 add.py&lt;/p&gt;
&lt;p&gt;sum = add.add (1,2) //乘法演算&lt;/p&gt;
&lt;p&gt;print(sum) //輸出結果
&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;3.*法運算&lt;/h2&gt;
&lt;p&gt;乘法程式碼(add.py)
&lt;pre class="brush: python"&gt;
def add (a,b): //def用於定義函式和類型的方法
    return a* b //將a乘b值傳回主程式中
&lt;/pre&gt;
乘法程式碼(print.py)
&lt;pre class="brush: python"&gt;
import sys //插入sys檔案中所有函式
sys.path.append("./m1") //資料夾路徑
import add //導入 add.py&lt;/p&gt;
&lt;p&gt;sum = add.add (1,2) //乘法演算&lt;/p&gt;
&lt;p&gt;print(sum) //輸出結果
&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;4./法運算&lt;/h2&gt;
&lt;p&gt;/法程式碼(add.py)
&lt;pre class="brush: python"&gt;
def add (a,b): //def用於定義函式和類型的方法
    return a/b //將a/b值傳回主程式中
&lt;/pre&gt;
/法程式碼(print.py)
&lt;pre class="brush: python"&gt;
import sys//插入sys檔案中所有函式
sys.path.append("./m1") //資料夾路徑
import add//導入 add.py&lt;/p&gt;
&lt;p&gt;sum = add.add (1,2) // /法演算&lt;/p&gt;
&lt;p&gt;print(sum) //輸出結果
&lt;/pre&gt;&lt;/p&gt;</summary><category term="w10"></category></entry><entry><title>2017springcd 第九週</title><link href="./2017springcd-di-jiu-zhou.html" rel="alternate"></link><updated>2017-04-20T00:00:00+08:00</updated><author><name>40423145</name></author><id>tag:,2017-04-20:./2017springcd-di-jiu-zhou.html</id><summary type="html">&lt;p&gt;&lt;b&gt;&lt;font color="blue"&gt;期中週&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;
</summary><category term="w9"></category></entry><entry><title>2017springcd 第八週</title><link href="./2017springcd-di-ba-zhou.html" rel="alternate"></link><updated>2017-04-13T00:00:00+08:00</updated><author><name>40423145</name></author><id>tag:,2017-04-13:./2017springcd-di-ba-zhou.html</id><summary type="html">&lt;p&gt;&lt;b&gt;&lt;font color="blue"&gt;無&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;
</summary><category term="w8"></category></entry><entry><title>2017springcd 第七週</title><link href="./2017springcd-di-qi-zhou.html" rel="alternate"></link><updated>2017-04-06T00:00:00+08:00</updated><author><name>40423145</name></author><id>tag:,2017-04-06:./2017springcd-di-qi-zhou.html</id><summary type="html">&lt;p&gt;&lt;b&gt;&lt;font color="blue"&gt;無&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;
</summary><category term="w7"></category></entry><entry><title>2017springcd 第六週</title><link href="./2017springcd-di-liu-zhou.html" rel="alternate"></link><updated>2017-03-30T00:00:00+08:00</updated><author><name>40423145</name></author><id>tag:,2017-03-30:./2017springcd-di-liu-zhou.html</id><summary type="html">&lt;p&gt;&lt;b&gt;&lt;font color="blue"&gt;利用Onshape做八連桿組合&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;


&lt;p&gt;&lt;small&gt;&lt;b&gt;&lt;font color="#FF0000"&gt;心得：&lt;/font&gt;&lt;/b&gt;&lt;/small&gt;用Onshape組合原本以為是輕鬆的事，沒想到盡然那摸困難，可是畫零件還蠻簡單的。&lt;/p&gt;
&lt;hr/&gt;

&lt;h1&gt;影片教學&lt;/h1&gt;
&lt;h3&gt;八連桿零件繪製&lt;/h3&gt;
&lt;p&gt;&lt;iframe src="https://player.vimeo.com/video/215038506" width="640" height="361" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;a href="https://vimeo.com/215038506"&gt;錄製_2017_04_27_22_12_03_309&lt;/a&gt; from &lt;a href="https://vimeo.com/user44207163"&gt;h2itw&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;
&lt;iframe src="https://player.vimeo.com/video/215038886" width="640" height="361" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/215038886"&gt;錄製_2017_04_27_22_38_34_537&lt;/a&gt; from &lt;a href="https://vimeo.com/user44207163"&gt;h2itw&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;iframe src="https://player.vimeo.com/video/215039047" width="640" height="361" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/215039047"&gt;錄製_2017_04_27_22_32_29_971&lt;/a&gt; from &lt;a href="https://vimeo.com/user44207163"&gt;h2itw&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;iframe src="https://player.vimeo.com/video/215039237" width="640" height="361" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/215039237"&gt;錄製_2017_04_27_22_44_02_491&lt;/a&gt; from &lt;a href="https://vimeo.com/user44207163"&gt;h2itw&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;iframe src="https://player.vimeo.com/video/215039529" width="640" height="361" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/215039529"&gt;錄製_2017_04_27_22_51_20_977&lt;/a&gt; from &lt;a href="https://vimeo.com/user44207163"&gt;h2itw&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;iframe src="https://player.vimeo.com/video/215039740" width="640" height="361" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/215039740"&gt;錄製_2017_04_27_22_59_58_868&lt;/a&gt; from &lt;a href="https://vimeo.com/user44207163"&gt;h2itw&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;</summary><category term="w6"></category></entry><entry><title>2017springcd 第五週</title><link href="./2017springcd-di-wu-zhou.html" rel="alternate"></link><updated>2017-03-23T00:00:00+08:00</updated><author><name>40423145</name></author><id>tag:,2017-03-23:./2017springcd-di-wu-zhou.html</id><summary type="html">&lt;p&gt;&lt;b&gt;&lt;font color="blue"&gt;利用v-rep設定單連桿運動&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;


&lt;hr/&gt;

&lt;p&gt;利用v-rep設定單連桿運動&lt;/p&gt;
&lt;p&gt;&lt;a href="http://imgur.com/oC3UNgA"&gt;&lt;img src="http://i.imgur.com/oC3UNgA.png" title="source: imgur.com" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://imgur.com/GF6skRj"&gt;&lt;img src="http://i.imgur.com/GF6skRj.png" title="source: imgur.com" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://imgur.com/3lcqdyr"&gt;&lt;img src="http://i.imgur.com/3lcqdyr.png" title="source: imgur.com" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://imgur.com/GULbM5T"&gt;&lt;img src="http://i.imgur.com/GULbM5T.png" title="source: imgur.com" /&gt;&lt;/a&gt;&lt;/p&gt;</summary><category term="w5"></category></entry><entry><title>2017springcd 第四週</title><link href="./2017springcd-di-si-zhou.html" rel="alternate"></link><updated>2017-03-16T00:00:00+08:00</updated><author><name>40423145</name></author><id>tag:,2017-03-16:./2017springcd-di-si-zhou.html</id><summary type="html">&lt;p&gt;&lt;b&gt;&lt;font color="blue"&gt;fossil小組共用網址&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;


&lt;h3&gt;Fossil SCM 與 Stunnel 啟動整合&lt;/h3&gt;
&lt;p&gt;&lt;small&gt;&lt;b&gt;&lt;font color="#FF0000"&gt;心得：&lt;/font&gt;&lt;/b&gt;&lt;/small&gt;這個網站跟倉儲的網誌不太一樣，它比較方便又能所有成員一起編輯，還省略了很多pyhton的指令，這樣子更能及時紀錄上課時的重點。只不過版面沒有倉儲網誌來得豐富！算是比較可惜一點。
&lt;hr/&gt;&lt;/p&gt;
&lt;p&gt;下載 tiny2017 可攜程式系統之後, 可以利用下列 start.bat, 在 Windows 環境中自動擷取電腦連外 IP, 自動設定 stunnel.conf 後, 以 https 協定啟動 Fossil SCM 伺服器.&lt;/p&gt;
&lt;p&gt;★第六組網址：&lt;a href="https://mde2a2.kmol.info/cdag6"&gt;&lt;button type="button" class="btn btn-primary btn-xs"&gt;按此進入&lt;/button&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;★課程網址：&lt;a href="https://mde2a2.kmol.info/cd"&gt;&lt;button type="button" class="btn btn-primary btn-xs"&gt;按此進入&lt;/button&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;

&lt;h1&gt;簡單註冊步驟&lt;/h1&gt;
&lt;p&gt;&lt;small&gt;&lt;b&gt;&lt;font color="blue"&gt;STEP1:&lt;/font&gt;&lt;/b&gt;&lt;/small&gt;點開後會進入此介面&lt;/p&gt;
&lt;p&gt;&lt;a href="http://imgur.com/gvs5Tor"&gt;&lt;img src="http://i.imgur.com/gvs5Tor.png" title="source: imgur.com" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;b&gt;&lt;font color="blue"&gt;STEP2:&lt;/font&gt;&lt;/b&gt;&lt;/small&gt;右上角login點進去，輸入ID:yen  密碼:ba1add&lt;/p&gt;
&lt;p&gt;&lt;a href="http://imgur.com/sALlXSx"&gt;&lt;img src="http://i.imgur.com/sALlXSx.png" title="source: imgur.com" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;b&gt;&lt;font color="blue"&gt;STEP3:&lt;/font&gt;&lt;/b&gt;&lt;/small&gt;先用此帳號登入，之後點Admin/user辦自己的帳號。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://imgur.com/2jpceRS"&gt;&lt;img src="http://i.imgur.com/2jpceRS.png" title="source: imgur.com" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;b&gt;&lt;font color="blue"&gt;STEP4:&lt;/font&gt;&lt;/b&gt;&lt;/small&gt;此介面為點選新增用戶後所呈現的畫面。&lt;/p&gt;
&lt;p&gt;紅色圈圈→創建ID與密碼&lt;/p&gt;
&lt;p&gt;藍色框框→為該使用者能擁有的權限選擇
(只要組長勾選Setup就好)&lt;/p&gt;
&lt;p&gt;&lt;a href="http://imgur.com/vUxBkOS"&gt;&lt;img src="http://i.imgur.com/vUxBkOS.png" title="source: imgur.com" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;b&gt;&lt;font color="blue"&gt;STEP5:&lt;/font&gt;&lt;/b&gt;&lt;/small&gt;創建完成後，到該介面再次確認是否符合需求。&lt;/p&gt;
&lt;p&gt;綠色框框→第六組組員帳號及權限&lt;/p&gt;
&lt;p&gt;藍色標示→為組長範例&lt;/p&gt;
&lt;p&gt;&lt;a href="http://imgur.com/Phc3oGY"&gt;&lt;img src="http://i.imgur.com/Phc3oGY.png" title="source: imgur.com" /&gt;&lt;/a&gt;&lt;/p&gt;</summary><category term="w4"></category></entry><entry><title>2017springcd 第三週</title><link href="./2017springcd-di-san-zhou.html" rel="alternate"></link><updated>2017-03-09T00:00:00+08:00</updated><author><name>40423145</name></author><id>tag:,2017-03-09:./2017springcd-di-san-zhou.html</id><summary type="html">&lt;p&gt;&lt;b&gt;&lt;font color="blue"&gt;小組mission:影片翻譯(英翻中)&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;


&lt;h3&gt;&lt;a href="https://www.youtube.com/watch?v=Pn3tKkeFVgI"&gt;Hyperworks3&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Optistuct's one of our focus area&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;font color="orange"&gt;Optistuct是我們的重點領域之一&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;is nonlinear large deformation analysis and in 2017 we added nonlinear transient analysis the main purpose was to couple Acusolve and structure interaction but also one development that happens during the last year came&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;font color="orange"&gt;是非線性大變形分析，在2017年，我們添加了非線性瞬態分析，其主要目的是耦合Acusolve和結構的相互作用，但也發生在去年發生的一個發展&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;out these lights and different point releases and it's all really maturing in 2017 is our contact analysis we have different ways of defining large sliding contact and things like that the fast contact analysis for for small&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;font color="orange"&gt;這些燈和不同點的釋放，這一切都在2017年真正成熟是我們的聯繫分析我們有不同的方式來定義大滑動接觸和事情，如快速接觸分析為小&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;deformation is blazing fast at the very simple idea that makes a solution very fast and that adds to optistruct as really a leading nonlinear structural solver our two major optimization packages are optistruct&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;font color="orange"&gt;變形是快速的，在一個非常簡單的想法，使解決方案非常快，並增加了optistruct作為真正的領先的非線性結構解算器我們的兩個主要優化包是光&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;for structural optimization as a huge multidisciplinary component tools and hyperstudy for general optimization work on multidisciplinary optimization Optistruct spend a lot of time continuing the&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;font color="orange"&gt;結構優化作為一個巨大的多學科組件工具和hyperstudy對多學科優化的一般優化工作Optistruct花費大量的時間繼續&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;development for topology optimization and we have the wave topology optimization we kept on working on the manufacturing solution to designed optimization the multimodal optimization is really maturing and we find more and&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;font color="orange"&gt;拓撲優化的開發，我們有波拓撲優化，我們繼續致力於製造解決方案設計優化多模態優化是真正成熟的，我們發現更多，&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;more applications where that help our goal is actually to include all the physics in the optimizations of the team right now is working on optimization for nonlinear problems and so on and then hyperstudy on the other hand is going&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;font color="orange"&gt;更多的應用程序，其中幫助我們的目標是實際上包括所有的物理在團隊的優化現在是工作在非線性問題的優化等等，然後hyperstudy另一方面是&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;through a new transformation of the user experience or the user experience has changed a few years back but we are now trying to make it much more easy to use by hiding a lot of the advanced functionality to the regular users and&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;font color="orange"&gt;通過用戶體驗的新轉型或用戶體驗已經改變了幾年，但是我們現在正試圖通過隱藏許多高級功能給常規用戶更容易使用，&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;depending on the level of expertise or depending on the job that the user has to do they can customize the user experience he added a few new connection one of them is a flux connection such as the electromagnetic code that we just&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;font color="orange"&gt;取決於專業水平或根據用戶必須做的工作，他們可以定制用戶體驗他添加了一些新的連接，其中一個是通量連接，如電磁代碼，我們只是&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;acquired for a low frequency electromagnetic we can now take a flux database and put it into hyper study into your study as well&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;font color="orange"&gt;獲得了一個低頻電磁，我們現在可以採取通量數據庫，並把它進入高速研究&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;</summary><category term="w3"></category></entry><entry><title>2017springcd 第二週</title><link href="./2017springcd-di-er-zhou.html" rel="alternate"></link><updated>2017-03-02T00:00:00+08:00</updated><author><name>40423145</name></author><id>tag:,2017-03-02:./2017springcd-di-er-zhou.html</id><summary type="html">&lt;p&gt;&lt;b&gt;&lt;font color="blue"&gt;使用Solve Space完成四連桿&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;


&lt;p&gt;&lt;small&gt;&lt;b&gt;&lt;font color="#FF0000"&gt;心得：&lt;/font&gt;&lt;/b&gt;&lt;/small&gt;Solve Space現在還是不太會使用它，用了好久才終於完成，看來要多用才能熟練起來~~&lt;/p&gt;
&lt;hr/&gt;

&lt;h1&gt;用solve space完成四連桿圖&lt;/h1&gt;
&lt;h3&gt;Link1(30CM)&lt;/h3&gt;
&lt;p&gt;&lt;iframe src="./../picture/w2_link30.html" width="600" height="450"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;h3&gt;Link2(50CM)&lt;/h3&gt;
&lt;p&gt;&lt;iframe src="./../picture/w2_link50.html" width="600" height="450"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;h3&gt;Link3(60CM)&lt;/h3&gt;
&lt;p&gt;&lt;iframe src="./../picture/w2_link60.html" width="600" height="450"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;h3&gt;組合圖&lt;/h3&gt;
&lt;p&gt;&lt;iframe src="./../picture/fourbar_move.html" width="600" height="450"&gt;&lt;/iframe&gt;&lt;/p&gt;</summary><category term="w2"></category></entry></feed>